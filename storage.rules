rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o { // This matches all files in your bucket

    // Rules for user avatars
    match /avatars/{userId}/{allPaths=**} {
      // Allow public read for avatars (common for profile pictures)
      allow read: if true;
      // Allow authenticated users to write only to their own avatar path
      // And add some constraints on size and type
      allow write: if request.auth != null && request.auth.uid == userId
                   && request.resource.size < 2 * 1024 * 1024 // Max 2MB
                   && request.resource.contentType.matches('image/.*'); // Only image types
    }

    // Rules for contract files
    // The {ownerId} can be either a user's UID or an agency's ID
    match /contracts/{ownerId}/{allPaths=**} {
      allow write: if request.auth != null && (
        // Allow if user is writing to their own folder
        request.auth.uid == ownerId ||
        // OR if the user has the 'isAgencyOwner' custom claim.
        // This is set when they create an agency.
        request.auth.token.isAgencyOwner == true
      );

      // Read access is more complex. Allow if:
      // 1. User is direct owner
      // 2. User is the agency owner for this path
      // 3. User is a talent member of the agency for this path
      // A broader read access for authenticated users is simpler and often acceptable
      // if file URLs are not guessable and Firestore rules protect the metadata.
      // For now, we grant read access to any authenticated user, relying on the app logic
      // to only show files to the correct users. This can be tightened later if needed.
       allow read: if request.auth != null;
    }
    
    // Rules for receipt images
    match /receipts/{userId}/{fileName} {
      // Allow an authenticated user to read their own receipt images
      allow read: if request.auth != null && request.auth.uid == userId;

      // Allow an authenticated user to write (upload, update, delete) their own receipt images
      // with constraints on file size and type
      allow write: if request.auth != null && request.auth.uid == userId
                   && request.resource.size < 4 * 1024 * 1024 // Max 4MB for receipts
                   && request.resource.contentType.matches('image/.*'); // Only image types (jpeg, png, gif, etc.)
    }
  }
}
