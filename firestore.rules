rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Helper to check if a user is the owner of a specific contract
    // This correctly handles both direct user ownership and agency ownership.
    function isOwnerOfContract(contractId) {
      // Check if the user has a token. If not, they can't be an owner.
      if (!isSignedIn()) {
        return false;
      }
      
      let contractData = get(/databases/$(database)/documents/contracts/$(contractId)).data;
      
      // Direct user ownership check
      let isDirectOwner = request.auth.uid == contractData.userId;
      
      // Agency ownership check
      // We check if the contract ownerType is 'agency' AND the requester's custom claim `agencyId` matches the contract's ownerId.
      let isAgencyOwner = contractData.ownerType == 'agency' && request.auth.token.agencyId == contractData.ownerId;
      
      return isDirectOwner || isAgencyOwner;
    }

    // Rules for User Profiles
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    // Rules for Contracts
    match /contracts/{contractId} {
      allow read, update, delete: if isOwnerOfContract(contractId);
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }
    
    // Rules for Agencies
    match /agencies/{agencyId} {
      allow read: if isSignedIn(); // Any signed-in user can read agency info (e.g., for invitations)
      allow create: if isSignedIn(); // The createAgency function handles the logic of one-per-user
      allow update: if isSignedIn() && get(/databases/$(database)/documents/agencies/$(agencyId)).data.ownerId == request.auth.uid;
    }
    
    // Rules for Agency Invitations (pending invites for non-users)
    match /agencyInvitations/{email} {
        // Functions need to be able to write to this to create an invitation for a non-existent user.
        // It's keyed by email, so it's not easily guessable.
        allow read, write: if isSignedIn();
    }

    // Rules for Receipts
    match /receipts/{receiptId} {
      // Only the user who uploaded the receipt can access it.
      allow read, create, delete, update: if isSignedIn() && request.auth.uid == request.resource.data.userId;
    }

    // Rules for email logs
    // This is the corrected rule. It allows reading logs for a contract IF the user owns that contract.
    match /emailLogs/{logId} {
      allow read: if isOwnerOfContract(resource.data.contractId);
      allow write: if false; // Only backend via Admin SDK can write logs.
    }
    
    // Rules for Shareable Contract Versions
    match /sharedContractVersions/{versionId} {
      allow read: if true; // Publicly readable by anyone with the link
      allow create: if isSignedIn(); // Callable function will verify ownership of original contract
      // Only the original creator can revoke a shared link
      allow update, delete: if isSignedIn() && get(/databases/$(database)/documents/sharedContractVersions/$(versionId)).data.userId == request.auth.uid;
    }

    // Rules for Comments and Proposals on shared versions
    match /contractComments/{commentId} {
        allow read: if true; // Public can read comments on a shared page
        allow create: if true; // Public can create comments
        allow update: if false; // Comments are immutable
        // Only the creator can delete comments on their shared contract
        allow delete: if isSignedIn() && get(/databases/$(database)/documents/contractComments/$(commentId)).data.creatorId == request.auth.uid;
    }

    match /redlineProposals/{proposalId} {
        allow read: if true; // Public can read proposals on a shared page
        allow create: if true; // Public can create proposals
        // Only the creator can accept/reject/delete proposals on their shared contract
        allow update, delete: if isSignedIn() && get(/databases/$(database)/documents/redlineProposals/$(proposalId)).data.creatorId == request.auth.uid;
    }
    
    // Rules for Internal Payouts (agency payouts to talent)
    match /internalPayouts/{payoutId} {
      allow read: if isSignedIn() && (
        resource.data.agencyOwnerId == request.auth.uid ||
        resource.data.talentId == request.auth.uid
      );
      // Payout creation is handled by a callable function which verifies ownership
      allow create: if isSignedIn() && request.auth.token.isAgencyOwner == true;
      allow write: if false; // Only backend can update status via webhooks
    }
    
  }
}
