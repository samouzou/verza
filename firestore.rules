
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isOwnerOfAgency(agencyId) {
      return exists(/databases/$(database)/documents/agencies/$(agencyId)) &&
             get(/databases/$(database)/documents/agencies/$(agencyId)).data.ownerId == request.auth.uid;
    }

    function isAgencyOwner() {
      return request.auth != null && request.auth.token.isAgencyOwner == true;
    }

    function userOwnsContract(contractId) {
      let contract = get(/databases/$(database)/documents/contracts/$(contractId)).data;
      let isDirectOwner = contract.userId == request.auth.uid;
      
      let isAgencyContractAndOwner = contract.ownerType == 'agency' &&
                                     request.auth.token.isAgencyOwner == true &&
                                     contract.ownerId == request.auth.token.agencyId;
                                     
      return isDirectOwner || isAgencyContractAndOwner;
    }
    
    // User Profiles
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Contracts
    match /contracts/{contractId} {
      // Allow get, update, delete if the user is the direct owner or the agency owner.
      allow get, update, delete: if request.auth != null && userOwnsContract(contractId);

      // Allow listing contracts if the user is the direct owner OR if they are an agency owner querying for their agency's contracts.
      // This rule is designed for queries from the frontend.
      allow list: if request.auth != null &&
                   ((resource == null || request.auth.uid == resource.data.userId) ||
                    (request.auth.token.isAgencyOwner == true && request.auth.token.agencyId == resource.data.ownerId));

      allow create: if request.auth != null;
    }

    // Agencies
    match /agencies/{agencyId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && isOwnerOfAgency(agencyId);
    }
    
    // Shared Contract Versions (for public links)
    match /sharedContractVersions/{versionId} {
      allow read: if true;
      allow create: if request.auth != null && userOwnsContract(request.resource.data.originalContractId);
      allow update: if request.auth != null && userOwnsContract(resource.data.originalContractId);
    }
    
    // Comments on Shared Contracts
    match /contractComments/{commentId} {
      allow read: if true;
      allow create: if true; // Anyone with the link can comment
      allow delete: if request.auth != null && userOwnsContract(resource.data.originalContractId);
      allow update: if request.auth != null && request.auth.uid == resource.data.creatorId; // Only creator can update (e.g., add replies)
    }

    // Redline Proposals on Shared Contracts
    match /redlineProposals/{proposalId} {
        allow read: if true;
        allow create: if true; // Public can create
        allow update: if request.auth != null && userOwnsContract(resource.data.originalContractId); // Only owner can accept/reject
    }

    // Internal Payouts for Agencies
    match /internalPayouts/{payoutId} {
      allow read: if request.auth != null && 
                   (request.auth.uid == resource.data.talentId || isOwnerOfAgency(resource.data.agencyId));
      allow create: if request.auth != null && isOwnerOfAgency(request.resource.data.agencyId);
    }

    // Receipts
    match /receipts/{receiptId} {
      allow read, create, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Email Logs
    match /emailLogs/{logId} {
      // Allow a user to read an email log if they are the owner of the contract it's associated with.
      allow read: if request.auth != null && userOwnsContract(resource.data.contractId);
      // Writes are backend-only.
      allow write: if false;
    }
  }
}
