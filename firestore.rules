rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(uid) {
      return isSignedIn() && request.auth.uid == uid;
    }

    function isAgencyOwner() {
      return isSignedIn() && request.auth.token.isAgencyOwner == true;
    }

    function isOwnerOfAgency(agencyId) {
      return isAgencyOwner() && request.auth.token.agencyId == agencyId;
    }

    // Helper to check direct user ownership or agency ownership of a contract
    function userOwnsContract(contractId) {
      let contractData = get(/databases/$(database)/documents/contracts/$(contractId)).data;
      // Direct user owns the contract OR
      // Contract is owned by an agency and the requester is the owner of that specific agency
      return isUser(contractData.userId) || (contractData.ownerType == 'agency' && isOwnerOfAgency(contractData.ownerId));
    }

    // Rules for user profiles
    match /users/{userId} {
      allow read: if true; // Publicly readable for avatars, names
      allow write: if isUser(userId); // Only the user can write to their own profile
    }

    // Rules for contracts
    match /contracts/{contractId} {
      allow get, update, delete: if userOwnsContract(contractId);
      
      // Allow two types of list queries:
      // 1. Fetching personal contracts
      // 2. Fetching agency contracts if the user is an agency owner
      allow list: if isSignedIn() &&
                  (request.query.userId == request.auth.uid ||
                   (isAgencyOwner() && request.query.ownerId == request.auth.token.agencyId));
                   
      allow create: if isUser(request.resource.data.userId);
    }
    
    // Rules for agencies
    match /agencies/{agencyId} {
        allow read: if isSignedIn(); // Allow reading basic agency info
        allow create, update, delete: if isOwnerOfAgency(agencyId); // Only owner can modify
    }
    
    // Rules for agency invitations (write only by server)
    match /agencyInvitations/{invitationId} {
      allow read, write: if false; // Managed by backend functions
    }

    // Rules for shared contract versions
    match /sharedContractVersions/{versionId} {
      allow read: if true; // Publicly readable link
      allow create: if isUser(request.resource.data.userId);
      allow update, delete: if isUser(get(/databases/$(database)/documents/sharedContractVersions/$(versionId)).data.userId);
    }

    // Rules for public comments on shared versions
    match /contractComments/{commentId} {
      allow read: if true; // Publicly readable
      allow create: if true; // Anyone can create
      // Only creator can delete comment or replies.
      allow update, delete: if isUser(get(/databases/$(database)/documents/contractComments/$(commentId)).data.creatorId);
    }
    
    // Rules for redline proposals on shared versions
    match /redlineProposals/{proposalId} {
      allow read: if true;
      allow create: if true;
      allow update, delete: if isUser(get(/databases/$(database)/documents/redlineProposals/$(proposalId)).data.creatorId);
    }
    
    // Rules for internal payouts (Agency -> Talent)
    match /internalPayouts/{payoutId} {
      allow create: if isOwnerOfAgency(request.resource.data.agencyId);
      allow read: if isSignedIn() && 
                   (isOwnerOfAgency(resource.data.agencyId) || isUser(resource.data.talentId));
      allow list: if isSignedIn() && 
                   (isOwnerOfAgency(request.query.agencyId) || request.query.talentId == request.auth.uid);
      allow update, delete: if false; // Handled by backend
    }

    // Rules for receipts
    match /receipts/{receiptId} {
      allow read, write, delete: if isUser(request.resource.data.userId) || isUser(get(/databases/$(database)/documents/receipts/$(receiptId)).data.userId);
    }

    // Rules for email logs (server-side only access)
    match /emailLogs/{logId} {
      allow read: if userOwnsContract(resource.data.contractId); // User can read logs for their own contracts
      allow write: if false; // Only backend via Admin SDK
    }
    
    // Disallow direct access to payment intent logs from client
    match /paymentIntents/{intentId} {
        allow read, write, delete: if false;
    }
  }
}
