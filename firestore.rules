
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Rules for the "users" collection
    match /users/{userId} {
      // Allow a user to read their own document
      allow read: if request.auth != null && request.auth.uid == userId;
      // Allow a user to create their own document and update their own profile
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for the "contracts" collection
    match /contracts/{contractId} {
      // Allow read if user is the assigned talent OR if they are an agency owner.
      // The app logic will handle filtering to the correct agency.
      allow read: if request.auth != null && 
                   (request.auth.uid == resource.data.userId || 
                    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAgencyOwner == true);

      // Allow write if:
      // 1. The user is creating a personal contract for themselves.
      // 2. The user is an agency owner creating a contract for their agency.
      allow write: if request.auth != null &&
                    (request.auth.uid == resource.data.userId || 
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAgencyOwner == true);
    }
    
    // Rules for shared contract versions (public read)
    match /sharedContractVersions/{versionId} {
        // Anyone with the link can read the specific shared version
        allow read: if true;
        
        // Only allow updating specific fields (like brandHasViewed)
        allow update: if request.resource.data.diff(resource.data).affectedKeys.hasOnly(['brandHasViewed', 'lastViewedByBrandAt']);
        
        // Disallow create/delete from public
        allow create, delete: if false;
    }
    
    // Rules for comments and proposals on shared contracts
    match /contractComments/{commentId} {
        // Anyone can create a comment (as this is for brand feedback)
        allow create: if true;
        // Only the creator can update (to add replies) or delete
        allow update, delete: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/contractComments/$(commentId)).data.creatorId;
        // Anyone with link can read
        allow read: if true;
    }
    
    match /redlineProposals/{proposalId} {
      // Anyone can create a proposal
      allow create: if true;
      // Only the creator can update (to accept/reject)
      allow update: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/redlineProposals/$(proposalId)).data.creatorId;
      // Anyone with the link can read
      allow read: if true;
      // Disallow public delete
      allow delete: if false;
    }
    
    // Rules for receipts
    match /receipts/{receiptId} {
        // A user can read/write their own receipts
        allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Rules for bank accounts and transactions
    match /users/{userId}/bankAccounts/{accountId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    match /users/{userId}/bankTransactions/{transactionId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
     // Rules for agencies
    match /agencies/{agencyId} {
        // Any authenticated user can read agency info (name, talent list).
        // Sensitive data is not stored here. App logic filters lists.
        allow read: if request.auth != null;

        // Only the owner can update the agency (e.g., invite new talent)
        allow update: if request.auth.uid == get(/databases/$(database)/documents/agencies/$(agencyId)).data.ownerId;
        
        // No one can delete an agency directly for now to prevent orphaned contracts.
        // Can be managed via a dedicated Cloud Function if needed.
        allow create, delete: if false; 
    }
  }
}
