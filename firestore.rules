rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read/write their own profile, and read other profiles for basic info.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Agencies can be read by any authenticated user, but only written by the owner.
    match /agencies/{agencyId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == request.resource.data.ownerId && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAgencyOwner == true;
      allow update, delete: if request.auth.uid == resource.data.ownerId;
    }

    // Contracts can be read by their assigned user OR by an agency owner.
    // Writes are more restricted.
    match /contracts/{contractId} {
        allow read: if request.auth != null && 
          (request.auth.uid == resource.data.userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAgencyOwner == true);

        allow create: if request.auth != null && 
          (request.auth.uid == request.resource.data.userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAgencyOwner == true);
          
        allow update: if request.auth != null && 
          (request.auth.uid == resource.data.userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAgencyOwner == true);
          
        allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Shared versions of contracts can be read publicly.
    // Only the creator can create or revoke them.
    match /sharedContractVersions/{versionId} {
      allow read: if true;
      allow create, update: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // Comments on shared contracts can be created by anyone, read by creator.
    match /contractComments/{commentId} {
        allow read: if request.auth != null && request.auth.uid == resource.data.creatorId;
        allow create: if request.resource.data.commenterName is string && request.resource.data.commenterName.size() > 0;
        allow delete: if request.auth != null && request.auth.uid == resource.data.creatorId;
        // Replies can be added by the creator
        allow update: if request.auth != null && request.auth.uid == resource.data.creatorId;
    }

    // Redline proposals on shared contracts
    match /redlineProposals/{proposalId} {
        allow read: if request.auth != null && request.auth.uid == resource.data.creatorId;
        allow create: if request.resource.data.proposerName is string && request.resource.data.proposerName.size() > 0;
        // Only the creator can accept/reject (update)
        allow update: if request.auth != null && request.auth.uid == resource.data.creatorId;
    }

    // Receipts can only be managed by the user who owns them.
    match /receipts/{receiptId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Bank accounts can only be managed by the user who owns them.
    match /users/{userId}/bankAccounts/{accountId} {
      allow read, write: if request.auth.uid == userId;
    }

    // Bank transactions can only be managed by the user who owns them.
    match /users/{userId}/bankTransactions/{transactionId} {
      allow read, write: if request.auth.uid == userId;
    }
    
    // Payment intents log
     match /paymentIntents/{intentId} {
      allow read, write: if false; // Should only be written by backend functions
    }
    
    // Payments log
    match /payments/{paymentId} {
      allow read: if request.auth.uid == resource.data.userId;
      allow write: if false; // Should only be written by backend functions
    }
    
     // Email logs
    match /emailLogs/{logId} {
        allow read: if request.auth != null && request.auth.uid == resource.data.userId;
        allow write: if false; // Only backend can write
    }
  }
}