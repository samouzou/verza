
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if the user is the owner of a contract,
    // either directly or as an agency owner.
    function isOwnerOfContract(contractId) {
      let contractData = get(/databases/$(database)/documents/contracts/$(contractId)).data;
      // User is the direct owner (talent)
      let isDirectOwner = contractData.userId == request.auth.uid;
      // User is the agency owner managing the contract
      let isAgencyOwner = contractData.ownerType == 'agency' && contractData.ownerId == request.auth.token.agencyId;
      return isDirectOwner || isAgencyOwner;
    }

    // Rules for user profiles
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for contracts
    match /contracts/{contractId} {
      allow read, update, delete: if request.auth != null && isOwnerOfContract(contractId);
      allow create: if request.auth != null;
    }
    
    // Rules for agencies
    match /agencies/{agencyId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth != null && request.auth.uid == resource.data.ownerId;
    }
    
    // Rules for agency invitations (write-only for backend)
    match /agencyInvitations/{invitationId} {
      allow read, write: if false; // Managed by backend functions
    }
    
    // Rules for internal agency-to-talent payouts
    match /internalPayouts/{payoutId} {
        allow read: if request.auth != null && 
          (request.auth.uid == resource.data.talentId || request.auth.uid == resource.data.agencyOwnerId);
        allow create: if request.auth != null && request.auth.uid == request.resource.data.agencyOwnerId;
        allow update, delete: if false; // Handled by backend/webhooks
    }

    // Rules for shared contract versions
    match /sharedContractVersions/{versionId} {
      allow read: if true; // Publicly readable
      allow create: if request.auth != null;
      allow update: if request.auth != null && get(/databases/$(database)/documents/contracts/$(resource.data.originalContractId)).data.userId == request.auth.uid;
      allow delete: if false;
    }
    
    // Rules for contract comments on shared versions
    match /contractComments/{commentId} {
        allow read: if true; // Publicly readable
        allow create: if true; // Anyone can comment
        allow update: if request.auth != null && request.auth.uid == resource.data.creatorId; // Creator can update replies
        allow delete: if request.auth != null && request.auth.uid == resource.data.creatorId; // Creator can delete comments
    }

    // Rules for redline proposals on shared versions
    match /redlineProposals/{proposalId} {
      allow read: if true;
      allow create: if true;
      allow update: if request.auth != null && request.auth.uid == resource.data.creatorId; // Only creator can accept/reject
      allow delete: if false;
    }

    // Rules for receipts
    match /users/{userId}/receipts/{receiptId} {
      allow read, create, update, delete: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for bank accounts
     match /users/{userId}/bankAccounts/{accountId} {
      allow read, create, update, delete: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for bank transactions
    match /users/{userId}/bankTransactions/{transactionId} {
      allow read, create, update, delete: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for email logs (server-side only access, except for read by owner)
    match /emailLogs/{logId} {
      // Allow a user to list/read logs for a contract they own.
      allow read: if request.auth != null && isOwnerOfContract(resource.data.contractId);
      allow write: if false; // Only backend via Admin SDK can write
      allow create, update, delete: if false;
    }
  }
}
