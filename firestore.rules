rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an authenticated agency owner for a given agency
    function isAgencyOwner(agencyId) {
      return request.auth.token.isAgencyOwner == true &&
             get(/databases/$(database)/documents/agencies/$(agencyId)).data.ownerId == request.auth.uid;
    }

    // Helper function to check if a user is a member of a given agency
    function isAgencyMember(agencyId) {
      // This requires the user's profile to have agency membership info.
      // This is a simplified check; a more robust one might check roles.
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             request.auth.uid in get(/databases/$(database)/documents/agencies/$(agencyId)).data.talent;
    }

    // Rules for user profiles
    match /users/{userId} {
      // Users can read their own profile
      allow read: if request.auth != null && request.auth.uid == userId;
      // Users can create their own profile upon signup and update it
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for contracts
    match /contracts/{contractId} {
      // Allow read if user is the direct owner OR the owner of the agency that owns the contract
      allow read: if request.auth != null && 
                     (resource.data.userId == request.auth.uid || 
                      (resource.data.ownerType == 'agency' && isAgencyOwner(resource.data.ownerId)));
      // Allow create if user is authenticated and is the owner being set
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Allow update if user is direct owner OR agency owner
      allow update: if request.auth != null &&
                       (resource.data.userId == request.auth.uid ||
                        (resource.data.ownerType == 'agency' && isAgencyOwner(resource.data.ownerId)));
      // Allow delete only by the direct user owner
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Rules for shared contract versions (public-facing)
    match /sharedContractVersions/{versionId} {
      // Anyone with the link can read it if it's active
      allow get: if resource.data.status == 'active';
      // Only the creator can create or modify (e.g., revoke)
      allow write: if request.auth != null && get(/databases/$(database)/documents/contracts/$(request.resource.data.originalContractId)).data.userId == request.auth.uid;

      // Public users (brands) can submit comments on a shared version
      // This requires no authentication, but we validate the data being written.
      // NOTE: This rule is now part of the `contractComments` collection rules for better security.
    }
    
    // Rules for comments on shared contracts
    match /contractComments/{commentId} {
      // Allow public read for comments associated with an active shared version
      allow read: if get(/databases/$(database)/documents/sharedContractVersions/$(resource.data.sharedVersionId)).data.status == 'active';
      // Allow public write (create) for new comments
      allow create: if request.resource.data.commenterName is string &&
                       request.resource.data.commenterName.size() > 0;
      // Allow owner of the original contract to update (e.g., to add replies)
      allow update: if request.auth != null && get(/databases/$(database)/documents/contracts/$(resource.data.originalContractId)).data.userId == request.auth.uid;
      // Allow owner to delete a comment (or brand to delete their own, if we add that logic)
      allow delete: if request.auth != null && get(/databases/$(database)/documents/contracts/$(resource.data.originalContractId)).data.userId == request.auth.uid;
    }

    // Rules for redline proposals on shared contracts
    match /redlineProposals/{proposalId} {
        // Public can read proposals if linked to an active shared version
        allow read: if get(/databases/$(database)/documents/sharedContractVersions/$(resource.data.sharedVersionId)).data.status == 'active';
        // Public can create proposals
        allow create: if request.resource.data.proposerName is string && request.resource.data.proposerName.size() > 0;
        // Only the creator who owns the contract can update (accept/reject) proposals
        allow update: if request.auth != null && get(/databases/$(database)/documents/contracts/$(resource.data.originalContractId)).data.userId == request.auth.uid;
    }
    
    // Rules for email logs (server-side only access)
    match /emailLogs/{logId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow write: if false; // Only backend via Admin SDK
    }

    // Rules for Stripe customer data (server-side only access)
    match /customers/{userId}/checkout_sessions/{sessionId} {
      allow read, write: if false; // Security managed by backend functions
    }
    match /customers/{userId}/subscriptions/{subscriptionId} {
      allow read, write: if false; // Security managed by backend functions
    }
    
    // Rules for agency data
    match /agencies/{agencyId} {
      // Allow read if the user is the owner or a member of the agency
      allow read: if request.auth != null && 
                     (resource.data.ownerId == request.auth.uid || 
                      exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
                      request.auth.uid in resource.data.talent.*.userId);
      // Only agency owner can update agency details
      allow update: if request.auth != null && resource.data.ownerId == request.auth.uid;
      // Creation is handled by a cloud function which has admin rights.
      allow create: if request.auth != null; 
    }
    
    // Rules for agency invitations (server-side only)
    match /agencyInvitations/{invitationId} {
      allow read, write: if false; // Managed by backend functions
    }
    
    // Rules for internal payouts (between agency and talent)
    match /internalPayouts/{payoutId} {
      // Talent can see their own payouts, Agency owner can see all payouts for their agency
      allow read: if request.auth != null && 
                     (resource.data.talentId == request.auth.uid || 
                      isAgencyOwner(resource.data.agencyId));
      // Creation is handled by a cloud function with security checks
      allow create: if false; 
      allow update, delete: if false; // Status updates handled by webhooks/backend
    }

    // Bank accounts and transactions should be private to the user
    match /users/{userId}/bankAccounts/{accountId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    match /users/{userId}/bankTransactions/{transactionId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Receipts should be private to the user
    match /receipts/{receiptId} {
        allow read, write, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
  }
}
