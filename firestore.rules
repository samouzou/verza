
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwnerOfAgency(agencyId) {
      return exists(/databases/$(database)/documents/agencies/$(agencyId)) &&
             get(/databases/$(database)/documents/agencies/$(agencyId)).data.ownerId == request.auth.uid;
    }

    function isAgencyOwner() {
      return request.auth.token.isAgencyOwner == true;
    }

    // New helper function to check contract ownership (direct or via agency)
    function userOwnsContract(contractId) {
        let contract = get(/databases/$(database)/documents/contracts/$(contractId)).data;
        let isDirectOwner = contract.userId == request.auth.uid;
        // Agency owner check: requires agencyId to be in the user's custom claims.
        let isAgencyContractOwner = contract.ownerType == 'agency' && contract.ownerId == request.auth.token.agencyId;
        return isDirectOwner || (isAgencyOwner() && isAgencyContractOwner);
    }

    // Rules for user profiles
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;
    }

    // Rules for contracts
    match /contracts/{contractId} {
      // Corrected list rule for agency owners
      allow list: if request.auth != null &&
                   ((request.query.limit && request.query.limit <= 20) || !request.query.limit) &&
                   ((request.auth.uid == resource.data.userId) || 
                    (isAgencyOwner() && resource.data.ownerType == 'agency' && resource.data.ownerId == request.auth.token.agencyId));
      
      allow read, update, delete: if request.auth != null && userOwnsContract(contractId);
      allow create: if request.auth != null;
    }

    // Rules for agencies
    match /agencies/{agencyId} {
        allow read: if request.auth != null;
        allow create: if isAgencyOwner(); // Only agency owners can create agencies
        allow update: if isOwnerOfAgency(agencyId);
        
        // Talent can be read by any authenticated user for now to simplify client-side logic
        match /talent/{talentId} {
            allow read: if request.auth != null;
            allow write: if isOwnerOfAgency(agencyId);
        }
    }
    
    match /agencyInvitations/{invitationId} {
        allow read, write: if request.auth != null; // Allows creating/claiming invitations
    }

    // Rules for shared contract versions (publicly readable link)
    match /sharedContractVersions/{versionId} {
      allow read: if true;
      allow write: if request.auth.uid == resource.data.userId; // Only creator can update/revoke
      allow create: if request.auth != null;
    }

    // Rules for comments on shared contracts (public can comment)
    match /contractComments/{commentId} {
      allow read, create: if true;
      allow update, delete: if request.auth.uid == resource.data.creatorId; // Only creator can delete
    }

    // Rules for redline proposals on shared contracts
    match /redlineProposals/{proposalId} {
        allow read, create: if true;
        allow update, delete: if request.auth.uid == resource.data.creatorId;
    }
    
    // Rules for internal payouts
    match /internalPayouts/{payoutId} {
      allow read: if request.auth.uid == resource.data.agencyOwnerId || request.auth.uid == resource.data.talentId;
      allow create: if request.auth.uid == resource.data.agencyOwnerId && isAgencyOwner();
      allow update, delete: if request.auth.uid == resource.data.agencyOwnerId;
    }

    // Rules for receipts
    match /receipts/{receiptId} {
        allow read, write, create, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Rules for bank accounts & transactions
    match /users/{userId}/bankAccounts/{accountId} {
        allow read, write, delete: if request.auth.uid == userId;
    }
     match /users/{userId}/bankTransactions/{transactionId} {
        allow read, write, delete: if request.auth.uid == userId;
    }
    
    // Rules for email logs (server-side only access)
    match /emailLogs/{logId} {
      allow read: if userOwnsContract(resource.data.contractId);
      allow write: if false; // Only backend via Admin SDK
    }
  }
}
