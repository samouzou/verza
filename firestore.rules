
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is authenticated and the owner of the document.
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Users can only read and write to their own document.
    match /users/{userId} {
      allow read, write: if isOwner(userId);

      // Users can manage their own bank accounts and transactions.
      match /bankAccounts/{accountId} {
        allow read, write, create, delete: if isOwner(userId);
      }
      match /bankTransactions/{transactionId} {
        allow read, write, create, delete: if isOwner(userId);
      }
    }

    // Contracts can be read, updated, and deleted by their owner.
    // Any authenticated user can create a contract.
    match /contracts/{contractId} {
      allow read, update, delete: if isOwner(resource.data.userId);
      allow create: if request.auth != null;
    }

    // Receipts can be managed by their owner.
    match /receipts/{receiptId} {
      allow read, update, delete: if isOwner(resource.data.userId);
      allow create: if request.auth != null;
    }

    // Shared contract versions can be read by anyone (for public links).
    // Only the owner can create, update or revoke them.
    match /sharedContractVersions/{versionId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if isOwner(resource.data.userId);
    }
  }
}
