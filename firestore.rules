rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Rules for the 'users' collection
    match /users/{userId} {
      // Allow users to read and update their own profile.
      allow read, update: if request.auth != null && request.auth.uid == userId;
      // Allow creation of user doc if the user is creating their own.
      allow create: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for the 'contracts' collection
    match /contracts/{contractId} {
      // Allow an action if the user is the talent on the contract,
      // OR if they are the owner of the agency that owns the contract.
      allow read, update, delete: if request.auth != null &&
          (request.auth.uid == resource.data.userId ||
           (resource.data.ownerType == 'agency' && get(/databases/$(database)/documents/agencies/$(resource.data.ownerId)).data.ownerId == request.auth.uid));

      // Allow create if the user is creating a contract for themselves
      // OR if they are an agency owner creating a contract for their agency.
      allow create: if request.auth != null &&
          (request.auth.uid == request.resource.data.userId ||
          (request.resource.data.ownerType == 'agency' && get(/databases/$(database)/documents/agencies/$(request.resource.data.ownerId)).data.ownerId == request.auth.uid));
    }
    
    // Rules for the 'agencies' collection
    match /agencies/{agencyId} {
        // Allow owner to read/write their agency doc
        allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.ownerId;
        // Anyone authenticated can create an agency (function handles one-per-user logic)
        allow create: if request.auth != null;
    }

    // Rules for shared contract versions
    match /sharedContractVersions/{versionId} {
        // Anyone with the link can read it
        allow get: if true;
        // Only the creator can create, update or delete share links
        allow list, create, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Rules for comments on shared contracts
    match /contractComments/{commentId} {
        // Anyone can create a comment (as they have the shared link)
        allow create: if true;
        // Allow the creator who owns the contract to read, update or delete comments.
        // The commenter can update/delete their own comment (future feature)
        allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.creatorId;
    }

    // Rules for redline proposals on shared contracts
    match /redlineProposals/{proposalId} {
        allow create: if true;
        allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.creatorId;
    }


    // PaymentIntents - Temporary for development - allows client-side logging
    match /paymentIntents/{intentId} {
      allow create: if true; // Allows any client to log a payment intent creation attempt
      allow read: if request.auth != null; // Authenticated users can read (for now)
    }
    
    // Payments - Logged after success via webhook
    match /payments/{paymentId} {
      allow read: if request.auth != null; // Allow authenticated users to read their payments
    }
    
    // Email Logs - Logged from backend
    match /emailLogs/{logId} {
        allow read: if request.auth != null && request.auth.uid == resource.data.userId; // User can read their own email logs
    }
  }
}