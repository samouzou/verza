rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for agency ownership
    function isAgencyOwner(agencyId, userId) {
      return get(/databases/$(database)/documents/agencies/$(agencyId)).data.ownerId == userId;
    }

    // Rules for User Profiles
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for Contracts
    match /contracts/{contractId} {
      allow read: if request.auth.uid == resource.data.userId || 
                     (resource.data.ownerType == 'agency' && isAgencyOwner(resource.data.ownerId, request.auth.uid));

      allow create: if (request.resource.data.ownerType == 'user' && request.resource.data.ownerId == request.auth.uid && request.resource.data.userId == request.auth.uid) ||
                     (request.resource.data.ownerType == 'agency' && isAgencyOwner(request.resource.data.ownerId, request.auth.uid));
      
      allow update, delete: if resource.data.ownerType == 'user' && resource.data.userId == request.auth.uid ||
                               (resource.data.ownerType == 'agency' && isAgencyOwner(resource.data.ownerId, request.auth.uid));
    }
    
    // Rules for Shared Contract Versions (Public Read)
    match /sharedContractVersions/{versionId} {
      allow read: if resource.data.status == 'active';
      allow write: if false; // Disallow public writes
    }

    // Rules for Contract Comments (Public Write for brands)
    match /contractComments/{commentId} {
      // Allow anyone to create (write) a new comment. Rules on parent doc prevent spam.
      allow create: if true;
      // Only the creator who owns the contract can update (e.g., add replies) or delete comments.
      allow update, delete: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/sharedContractVersions/$(request.resource.data.sharedVersionId)).data.userId;
      // Allow the creator to read comments on their shared contracts.
      allow read: if request.auth != null && request.auth.uid == resource.data.creatorId;
    }
    
    // Rules for Redline Proposals
    match /redlineProposals/{proposalId} {
      allow create: if true; // Public can create proposals
      // Only the creator can read or update (accept/reject) proposals for their contracts
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.creatorId;
    }
    
     // Rules for Agencies
    match /agencies/{agencyId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && resource.data.ownerId == request.auth.uid;
    }

    // Rules for Receipts
    match /receipts/{receiptId} {
      // User can manage their own receipts
      allow read, write, delete: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }
    
    // Bank Accounts & Transactions are creator-only
    match /users/{userId}/bankAccounts/{accountId} {
       allow read, write, delete: if request.auth != null && request.auth.uid == userId;
    }
     match /users/{userId}/bankTransactions/{transactionId} {
       allow read, write, delete: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for Email Logs
    match /emailLogs/{logId} {
      // Only the authenticated user associated with the log can read it.
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      // Disallow public or unauthorized creation/updates/deletions.
      // Creation should be handled by backend functions only.
      allow write: if false;
    }

    // Rules for Payments & Payment Intents
    match /paymentIntents/{intentId} {
      // Only the user associated with the intent can read it
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      // Creation is backend-only
      allow write: if false;
    }
     match /payments/{paymentId} {
      // Only the user associated with the payment can read it
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      // Creation is backend-only
      allow write: if false;
    }
  }
}