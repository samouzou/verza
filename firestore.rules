
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user owns the contract
    function isContractOwner(contractId, userId) {
      let contract = get(/databases/$(database)/documents/contracts/$(contractId)).data;
      // Check for direct ownership
      let isDirectOwner = contract.userId == userId;
      // Check for agency ownership
      let userProfile = get(/databases/$(database)/documents/users/$(userId)).data;
      let agencyId = userProfile.agencyMemberships[0].agencyId; // Assuming owner is only in one agency
      let isAgencyOwner = userProfile.role == 'agency_owner' && contract.ownerType == 'agency' && contract.ownerId == agencyId;
      
      return isDirectOwner || isAgencyOwner;
    }

    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
    }

    match /contracts/{contractId} {
      allow read, update, delete: if request.auth != null && isContractOwner(contractId, request.auth.uid);
      allow create: if request.auth != null;
    }
    
    match /sharedContractVersions/{versionId} {
      allow read: if true; // Publicly accessible by link
      allow create: if request.auth != null; // Creator must be logged in to create
      allow update: if resource.data.status == 'revoked' || request.auth.uid == resource.data.userId; // Allow creator to update
    }

    match /contractComments/{commentId} {
      allow read: if true; // Publicly readable on shared page
      allow create: if true; // Public can create comments
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.creatorId; // Only creator can manage replies/delete
    }

    match /redlineProposals/{proposalId} {
        allow read: if true;
        allow create: if true; // Publicly submittable
        allow update: if request.auth.uid == resource.data.creatorId; // Only creator can accept/reject
    }

    // Rules for email logs, allowing authorized reads for history viewing
    match /emailLogs/{logId} {
      // Users can list logs for contracts they own
      allow list: if request.auth != null && isContractOwner(request.query.where.contractId, request.auth.uid);
      // Users can read a specific log if they own the associated contract
      allow get: if request.auth != null && isContractOwner(get(/databases/$(database)/documents/emailLogs/$(logId)).data.contractId, request.auth.uid);
      
      // No client-side writes allowed
      allow write: if false; 
    }
    
    match /receipts/{receiptId} {
      allow read, create, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    match /bankAccounts/{accountId} {
        // These are nested under a user, so we need to use `userId` from the path.
        match /users/{userId}/{path=**} {
             allow read, write, delete: if request.auth != null && request.auth.uid == userId;
        }
    }
    
    match /bankTransactions/{transactionId} {
       match /users/{userId}/{path=**} {
             allow read, write, delete: if request.auth != null && request.auth.uid == userId;
        }
    }

    match /agencies/{agencyId} {
      // Agency owner can do anything
      allow read, update: if request.auth != null && get(/databases/$(database)/documents/agencies/$(agencyId)).data.ownerId == request.auth.uid;
      // Creation is handled by a cloud function, not direct client
      allow create: if request.auth != null; 
      // Talent can read agency data if they are an active member
      allow read: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/agencies/$(agencyId)).data.talent.map(t => t.userId);
    }
    
    match /agencyInvitations/{invitationId} {
        // Backend handles creation/updates
        allow read, write: if false; 
    }
    
    match /internalPayouts/{payoutId} {
        allow read: if request.auth != null && (get(/databases/$(database)/documents/internalPayouts/$(payoutId)).data.agencyOwnerId == request.auth.uid || get(/databases/$(database)/documents/internalPayouts/$(payoutId)).data.talentId == request.auth.uid);
        allow create, update, delete: if false; // Only backend
    }
  }
}
