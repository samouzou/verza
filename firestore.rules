
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Rules for the 'users' collection
    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow delete: if false;
    }

    // Rules for the 'contracts' collection
    match /contracts/{contractId} {
      // PUBLIC READ: Allow anyone to read contract details.
      // This is necessary for the public payment page (/pay/contract/[id])
      allow read: if true; 

      // Authenticated users can create contracts if they are the owner.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      
      // Authenticated users can update or delete only their own contracts.
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    
    match /sharedContractVersions/{sharedVersionId} {
      // PUBLIC READ for active links: Allow anyone to read if the status is 'active'.
      // Authenticated creator can always read their own versions regardless of status.
      allow read: if (resource.data.status == 'active') || 
                       (request.auth != null && request.auth.uid == resource.data.userId);

      // Allow a user to create a shared version if:
      // 1. They are authenticated.
      // 2. The userId in the new document matches their own UID.
      // 3. The originalContractId in the new document points to a contract they own.
      allow create: if request.auth != null &&
                       request.resource.data.userId == request.auth.uid &&
                       get(/databases/$(database)/documents/contracts/$(request.resource.data.originalContractId)).data.userId == request.auth.uid;

      // Only the creator can update (e.g., to revoke) or delete.
      // Note: The brandHasViewed update from the client will FAIL with this rule.
      // This needs a backend function to update brandHasViewed securely.
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Rules for the 'receipts' collection
    match /receipts/{receiptId} {
      allow read, update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }
    
    // Rules for 'paymentIntents' collection
    match /paymentIntents/{intentId} {
      allow read: if request.auth != null && (
                    request.auth.uid == resource.data.userId ||
                    request.auth.uid == resource.data.creatorId 
                  );
      allow create, update, delete: if false; 
    }

    // Rules for 'payments' collection
    match /payments/{paymentId} {
       allow read: if request.auth != null && (
                    request.auth.uid == resource.data.userId || 
                    (exists(/databases/$(database)/documents/contracts/$(resource.data.contractId)) && 
                     get(/databases/$(database)/documents/contracts/$(resource.data.contractId)).data.userId == request.auth.uid) // Creator can read
                  );
      allow create, update, delete: if false; 
    }

    // Rules for 'emailLogs' collection
    match /emailLogs/{logId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create, update, delete: if false; 
    }
  }
}
