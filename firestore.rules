
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection: Allow users to read/write their own document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Contracts collection: Allow users to read/write their own contracts
    match /contracts/{contractId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Receipts collection: Allow users to read/write their own receipts
    match /receipts/{receiptId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // SharedContractVersions collection
    match /sharedContractVersions/{versionId} {
      // Allow ANYONE to read if the version is 'active'
      allow read: if resource.data.status == 'active';

      // Allow the CREATOR (owner) to update (e.g., to revoke status) or delete their own shared versions.
      // The 'create' operation is handled by the Cloud Function, which checks ownership of the original contract.
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      // Note: Direct client creation of sharedContractVersions is not intended.
      // The 'createShareableContractVersion' Cloud Function handles creation.
    }

    // Default deny for any other collections or paths not explicitly matched.
    // Ensure you add rules for any other collections you create.
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
