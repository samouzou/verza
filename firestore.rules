
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an agency owner of a specific agency
    function isAgencyOwner(agencyId) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAgencyOwner == true &&
             exists(/databases/$(database)/documents/agencies/$(agencyId)) &&
             get(/databases/$(database)/documents/agencies/$(agencyId)).data.ownerId == request.auth.uid;
    }
    
    // Helper function to check if a user is an owner of the agency that a talent belongs to
    function isOwnerOfTalentsAgency(talentUserId) {
      let userDoc = get(/databases/$(database)/documents/users/$(talentUserId)).data;
      // Check if the user has agencyMemberships and find the relevant one
      // This is simplified; a more complex rule might need to check a list of agencies.
      return exists(/databases/$(database)/documents/agencies/$(userDoc.agencyMemberships[0].agencyId)) &&
             get(/databases/$(database)/documents/agencies/$(userDoc.agencyMemberships[0].agencyId)).data.ownerId == request.auth.uid;
    }

    // Contracts:
    // - Creators can create/read/update/delete their own contracts.
    // - Agency owners can manage contracts owned by their agency.
    match /contracts/{contractId} {
      allow read: if request.auth != null &&
                     (resource.data.userId == request.auth.uid ||
                      (resource.data.ownerType == 'agency' && isAgencyOwner(resource.data.ownerId)));
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null &&
                               (resource.data.userId == request.auth.uid ||
                                (resource.data.ownerType == 'agency' && isAgencyOwner(resource.data.ownerId)));
    }
    
    // contractComments:
    // - Anyone with the link can read (for shared versions).
    // - Anyone can create a comment on a shared version.
    // - Only the creator (or their agency owner) can delete comments or replies.
    match /contractComments/{commentId} {
        allow read: if true;
        allow create: if true; // Public can create comments on shared links.
        allow update, delete: if request.auth != null &&
                                 (resource.data.creatorId == request.auth.uid || isOwnerOfTalentsAgency(resource.data.creatorId));
    }

    // redlineProposals:
    // - Anyone can create (propose a change) on a shared version.
    // - Only the creator (or their agency owner) can read or update (accept/reject) proposals.
    match /redlineProposals/{proposalId} {
      allow read, update, delete: if request.auth != null &&
                               (resource.data.creatorId == request.auth.uid || isOwnerOfTalentsAgency(resource.data.creatorId));
      allow create: if true; // Public can create proposals.
    }


    // Users:
    // - Users can read their own profile.
    // - Users can update specific fields on their own profile.
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId &&
                       !('role' in request.resource.data) &&
                       !('isAgencyOwner' in request.resource.data);
    }

    // Agencies:
    // - Agency owners can manage their own agency document.
    // - Agency members (talent) can read the agency document they belong to.
    match /agencies/{agencyId} {
      allow read: if request.auth != null &&
                    (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                     agencyId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.agencyMemberships.map(mem => mem.agencyId));
      allow create: if request.auth != null;
      allow update: if request.auth != null && isAgencyOwner(agencyId);
    }
    
     // Receipts:
    // - Users can manage their own receipts.
    // - Agency owners can manage receipts for talent in their agency.
    match /receipts/{receiptId} {
      allow read, create: if request.auth != null; // Anyone auth'd can create/read for now
      allow update, delete: if request.auth != null &&
                              (resource.data.userId == request.auth.uid ||
                               (exists(/databases/$(database)/documents/users/$(resource.data.userId)) &&
                                get(/databases/$(database)/documents/users/$(resource.data.userId)).data.agencyMemberships[0].agencyId != null &&
                                isAgencyOwner(get(/databases/$(database)/documents/users/$(resource.data.userId)).data.agencyMemberships[0].agencyId)));
    }


    // SharedContractVersions:
    // - Anyone can read a shared contract version.
    // - Only the creator can create or revoke a shared version.
    match /sharedContractVersions/{versionId} {
      allow read: if true; // Publicly readable
      allow create, update: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // Bank Accounts & Transactions (Private to user)
    match /users/{userId}/bankAccounts/{accountId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
     match /users/{userId}/bankTransactions/{transactionId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Internal Payouts (Private to agency owner and talent)
    match /internalPayouts/{payoutId} {
      allow read: if request.auth != null && 
                     (resource.data.agencyOwnerId == request.auth.uid || resource.data.talentId == request.auth.uid);
      allow create: if request.auth != null && resource.data.agencyOwnerId == request.auth.uid;
      // No updates allowed from client-side for security, handled by webhooks
      allow update, delete: if false; 
    }
  }
}
