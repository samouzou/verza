
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isAgencyOwner(agencyId) {
      return request.auth != null && request.auth.token.agencyId == agencyId;
    }
    
    function isOwnerOfAgency(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.agencyMemberships[0].agencyId == request.auth.token.agencyId;
    }

    // New helper function specifically for checking contract ownership.
    // This will be used for the emailLogs rule without disrupting existing rules.
    function userOwnsContract(contractId) {
      let contractData = get(/databases/$(database)/documents/contracts/$(contractId)).data;
      // User is the direct owner of the contract
      return (isOwner(contractData.userId)) ||
             // OR user is the owner of the agency that owns the contract
             (contractData.ownerType == 'agency' && isAgencyOwner(contractData.ownerId));
    }

    // Rules for collections
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if isOwner(userId);
    }

    match /agencies/{agencyId} {
      allow read: if request.auth != null;
      allow write: if isAgencyOwner(agencyId);
    }
    
    match /agencyInvitations/{invitationId} {
      allow read, write: if request.auth != null;
    }

    match /contracts/{contractId} {
      allow read, update, delete: if isOwner(resource.data.userId) || isAgencyOwner(resource.data.ownerId);
      allow create: if request.auth != null;
    }

    match /sharedContractVersions/{versionId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if isOwner(get(/databases/$(database)/documents/contracts/$(resource.data.originalContractId)).data.userId);
    }
    
    match /contractComments/{commentId} {
      allow read, create: if true;
      allow delete: if isOwner(resource.data.creatorId);
      allow update: if isOwner(resource.data.creatorId); // For managing replies
    }

    match /redlineProposals/{proposalId} {
       allow read, create: if true;
       allow update: if isOwner(resource.data.creatorId); // Only creator can accept/reject
    }

    match /internalPayouts/{payoutId} {
      allow read: if isOwner(resource.data.talentId) || isAgencyOwner(resource.data.agencyId);
      allow create: if isAgencyOwner(request.resource.data.agencyId);
    }
    
    match /receipts/{receiptId} {
      allow read, create, update, delete: if isOwner(resource.data.userId);
    }

    // Rules for email logs - UPDATED
    match /emailLogs/{logId} {
      // Use the new helper function here. This allows a user to query for all logs
      // where they own the associated contract.
      allow read: if userOwnsContract(resource.data.contractId);
      allow write: if false; // Only backend via Admin SDK can write logs
    }
  }
}
