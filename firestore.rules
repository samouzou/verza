rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Rules for the 'users' collection
    // Users can read and update their own profile information.
    // Users can create their own user document (e.g., on first sign-up).
    // Deleting user documents directly by clients is generally disallowed.
    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
      // For user document writes (like subscription status by backend),
      // the Admin SDK used by Cloud Functions bypasses these client-side rules.
      // If you need client to write specific fields here, you'd add more granular 'update' rules.
      allow delete: if false;
    }

    // Rules for the 'contracts' collection
    match /contracts/{contractId} {
      // PUBLIC READ: Allow anyone to read contract details.
      // This is necessary for the public payment page (/pay/contract/[id])
      // to fetch and display contract information (e.g., amount, brand name)
      // before the client makes a payment.
      // WARNING: This makes ALL fields of ALL contracts publicly readable if the contractId is known.
      // For enhanced security in a production app with sensitive contract data,
      // consider using a Cloud Function as an intermediary to serve only essential,
      // non-sensitive details to the public payment page.
      allow read: if true;

      // Authenticated users can create contracts if they are the owner.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      
      // Authenticated users can update or delete only their own contracts.
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    
    match /sharedContractVersions/{sharedVersionId} {
      // PUBLIC READ for active links: Allow anyone to read if the status is 'active'.
      // Authenticated creator can always read their own versions regardless of status.
      // Note: A backend function will be needed to update brandHasViewed securely without
      //       granting public write access. For now, this is best-effort from the client.
      allow read: if (resource.data.status == 'active') || 
                       (request.auth != null && request.auth.uid == resource.data.userId);

      // Allow a user to create a shared version if:
      // 1. They are authenticated.
      // 2. The userId in the new document matches their own UID.
      // 3. The originalContractId in the new document points to a contract they own.
      allow create: if request.auth != null &&
                       request.resource.data.userId == request.auth.uid &&
                       get(/databases/$(database)/documents/contracts/$(request.resource.data.originalContractId)).data.userId == request.auth.uid;

      // Only the creator can update (e.g., to revoke) or delete.
      allow update: if request.auth != null && request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Rules for 'contractComments' collection
    match /contractComments/{commentId} {
      allow create: if request.resource.data.sharedVersionId != null &&
                       exists(/databases/$(database)/documents/sharedContractVersions/$(request.resource.data.sharedVersionId)) &&
                       get(/databases/$(database)/documents/sharedContractVersions/$(request.resource.data.sharedVersionId)).data.status == 'active' &&
                       request.resource.data.creatorId == get(/databases/$(database)/documents/sharedContractVersions/$(request.resource.data.sharedVersionId)).data.userId &&
                       request.resource.data.commenterName is string && request.resource.data.commenterName.size() > 0 && request.resource.data.commenterName.size() < 100 &&
                       request.resource.data.commentText is string && request.resource.data.commentText.size() > 0 && request.resource.data.commentText.size() < 2000 &&
                       request.resource.data.commentedAt == request.time &&
                       (request.resource.data.commenterEmail == null || (request.resource.data.commenterEmail is string && request.resource.data.commenterEmail.size() < 100)) &&
                       request.resource.data.originalContractId == get(/databases/$(database)/documents/sharedContractVersions/$(request.resource.data.sharedVersionId)).data.originalContractId;
      
      allow read: if get(/databases/$(database)/documents/sharedContractVersions/$(resource.data.sharedVersionId)).data.status == 'active' ||
                     (request.auth != null && request.auth.uid == resource.data.creatorId);

      // Allow creator to update (e.g., add replies)
      // Ensures critical fields of the comment itself are not changed during a reply addition.
      allow update: if request.auth != null && request.auth.uid == resource.data.creatorId &&
                       request.resource.data.creatorId == resource.data.creatorId && // Ensure original creatorId isn't changed
                       request.resource.data.originalContractId == resource.data.originalContractId && // Ensure originalContractId isn't changed
                       request.resource.data.sharedVersionId == resource.data.sharedVersionId && // Ensure sharedVersionId isn't changed
                       (request.resource.data.replies == null || request.resource.data.replies is list);
                       
      allow delete: if request.auth != null && request.auth.uid == resource.data.creatorId;
    }
    
    // Rules for 'redlineProposals' collection
    match /redlineProposals/{proposalId} {
      // ANYONE can create a proposal on an active shared contract.
      // This validates that the proposal is being created against a valid, active shared version
      // and that the proposer provides the required information.
      allow create: if request.resource.data.sharedVersionId != null &&
                       exists(/databases/$(database)/documents/sharedContractVersions/$(request.resource.data.sharedVersionId)) &&
                       get(/databases/$(database)/documents/sharedContractVersions/$(request.resource.data.sharedVersionId)).data.status == 'active' &&
                       // Proposer must provide their name.
                       request.resource.data.proposerName is string && request.resource.data.proposerName.size() > 0 &&
                       // Proposal must contain text to change.
                       request.resource.data.originalText is string && request.resource.data.originalText.size() > 0 &&
                       request.resource.data.proposedText is string && request.resource.data.proposedText.size() > 0 &&
                       // The creator ID must match the owner of the contract.
                       request.resource.data.creatorId == get(/databases/$(database)/documents/sharedContractVersions/$(request.resource.data.sharedVersionId)).data.userId &&
                       // The status must be 'proposed' on creation.
                       request.resource.data.status == 'proposed' &&
                       // The proposedAt timestamp must match the server time.
                       request.resource.data.proposedAt == request.time;
      
      // ANYONE can read proposals for an active shared version.
      // The CREATOR can always read proposals for their contracts.
      allow read: if get(/databases/$(database)/documents/sharedContractVersions/$(resource.data.sharedVersionId)).data.status == 'active' ||
                     (request.auth != null && request.auth.uid == resource.data.creatorId);

      // ONLY THE CREATOR can update a proposal (to accept or reject it).
      // They cannot change the original proposal content.
      allow update: if request.auth != null && request.auth.uid == resource.data.creatorId &&
                       // Ensure the core proposal data is immutable
                       request.resource.data.originalText == resource.data.originalText &&
                       request.resource.data.proposedText == resource.data.proposedText &&
                       request.resource.data.proposerName == resource.data.proposerName &&
                       // Allow status to be changed to 'accepted' or 'rejected'.
                       request.resource.data.status in ['accepted', 'rejected'];

      // ONLY THE CREATOR can delete a proposal.
      allow delete: if request.auth != null && request.auth.uid == resource.data.creatorId;
    }
    
    // Rules for the 'receipts' collection
    match /receipts/{receiptId} {
      allow read, update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }
    
    // Rules for 'paymentIntents' collection (created by backend)
    // Typically, these should only be writable by your backend (Admin SDK)
    // and perhaps readable by the authenticated user who initiated it or owns the contract.
    match /paymentIntents/{intentId} {
      allow read: if request.auth != null && (
                    request.auth.uid == resource.data.userId ||  // Payer
                    request.auth.uid == resource.data.creatorId // Creator/Recipient
                  );
      allow create, update, delete: if false; // Only backend via Admin SDK
    }

    // Rules for 'payments' collection (created by backend webhook)
    // Similar to paymentIntents, mostly backend-managed.
    match /payments/{paymentId} {
       allow read: if request.auth != null && (
                    request.auth.uid == resource.data.userId || // Payer mentioned in metadata
                    request.auth.uid == resource.data.creatorId // Creator/Recipient if you add this field
                  );
      allow create, update, delete: if false; // Only backend via Admin SDK
    }

    // Rules for 'emailLogs' collection (created by backend)
    // Typically, these should only be writable by your backend.
    // Read access might be for admins or specific users if needed.
    match /emailLogs/{logId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid; // If logs contain userId
      // Or, if only admins/backend should read:
      // allow read: if false; 
      allow create, update, delete: if false; // Only backend via Admin SDK
    }
  }
}
