rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Rules for user profiles
    match /users/{userId} {
      allow read: if request.auth.uid == userId;
      allow write: if request.auth.uid == userId;
    }

    // Rules for contracts
    match /contracts/{contractId} {
      allow read, update, delete: if request.auth.uid == resource.data.userId || 
                                     (resource.data.ownerType == 'agency' && get(/databases/$(database)/documents/agencies/$(resource.data.ownerId)).data.ownerId == request.auth.uid);
      allow create: if request.auth.uid == request.resource.data.userId ||
                       (request.resource.data.ownerType == 'agency' && get(/databases/$(database)/documents/agencies/$(request.resource.data.ownerId)).data.ownerId == request.auth.uid);
    }
    
    // Rules for shared contract versions
    match /sharedContractVersions/{versionId} {
      allow read: if true; // Publicly readable link
      allow create: if request.auth.uid == request.resource.data.userId; // Only contract owner can create
      allow update(brandHasViewed, lastViewedByBrandAt): if true; // Allow brand to update view status
      allow update(status): if request.auth.uid == resource.data.userId; // Only creator can revoke
      allow delete: if request.auth.uid == resource.data.userId; // Only creator can delete
    }

    // Rules for comments on shared contracts
    match /contractComments/{commentId} {
      allow read: if true; // Readable by anyone with the link
      allow create: if request.resource.data.commenterName != null; // Basic validation for public write
      allow update, delete: if request.auth.uid == resource.data.creatorId; // Only creator can moderate
    }
    
    // Rules for redline proposals on shared contracts
    match /redlineProposals/{proposalId} {
      allow read: if true; // Readable by anyone with the link
      allow create: if request.resource.data.proposerName != null; // Basic validation for public write
      allow update: if request.auth.uid == resource.data.creatorId; // Only creator can accept/reject
      allow delete: if request.auth.uid == resource.data.creatorId;
    }

    // Rules for Stripe payment intents
    match /paymentIntents/{intentId} {
      allow read, create: if true; // Allow creation, webhook will handle validation
    }

    // Rules for payments (records of successful payments)
    match /payments/{paymentId} {
      allow read: if request.auth.uid == resource.data.userId;
      allow create: if true; // Created by webhook
    }
    
    // Rules for email logs
    match /emailLogs/{logId} {
        allow read, write: if request.auth != null;
    }

    // Rules for bank accounts and transactions
    match /users/{userId}/bankAccounts/{accountId} {
        allow read, write: if request.auth.uid == userId;
    }
    match /users/{userId}/bankTransactions/{transactionId} {
        allow read, write: if request.auth.uid == userId;
    }
    
    // Rules for receipts
    match /receipts/{receiptId} {
        allow read, write: if request.auth.uid == resource.data.userId;
        allow create: if request.auth.uid == request.resource.data.userId;
    }

    // Rules for agencies
    match /agencies/{agencyId} {
      allow read: if request.auth.uid == resource.data.ownerId || 
                     resource.data.talent[?(@.userId == request.auth.uid)].size() > 0;
      allow create: if request.auth.uid == request.resource.data.ownerId;
      allow update: if request.auth.uid == resource.data.ownerId ||
                       (
                         request.resource.data.diff(resource.data).affectedKeys()
                           .hasOnly(['talent']) && 
                         resource.data.talent[?(@.userId == request.auth.uid && @.status == 'pending')].size() > 0
                       );
      allow delete: if false; // Prevent accidental deletion
    }

    // Rules for internal agency payouts
    match /internalPayouts/{payoutId} {
      allow read: if request.auth.uid == get(/databases/$(database)/documents/agencies/$(resource.data.agencyId)).data.ownerId ||
                     request.auth.uid == resource.data.talentId;
      allow create: if request.auth.uid == request.resource.data.agencyOwnerId;
      allow update, delete: if false; // Payouts are immutable for now
    }
  }
}
