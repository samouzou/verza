rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user owns a contract
    function isContractOwner(contractId) {
      let contract = get(/databases/$(database)/documents/contracts/$(contractId)).data;
      return request.auth != null && (
        contract.userId == request.auth.uid ||
        (contract.ownerType == 'agency' && contract.ownerId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.agencyMemberships)
      );
    }
    
    // Rules for user profiles
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for contracts
    match /contracts/{contractId} {
      allow read, get: if isContractOwner(contractId);
      allow list: if request.auth != null && request.query.limit <= 20; // Secure list queries
      allow create, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Rules for shared contract versions
    match /sharedContractVersions/{versionId} {
      allow read: if resource.data.status == 'active';
      allow create: if request.auth != null; // Server-side creation is secure
      allow update, delete: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/sharedContractVersions/$(versionId)).data.userId;
    }
    
    // Rules for contract comments (public write, owner read/delete)
    match /contractComments/{commentId} {
        allow read: if request.auth != null; // Allow creator to read
        allow create: if true; // Allow anyone with link to create
        allow update, delete: if request.auth != null && request.auth.uid == resource.data.creatorId;
    }
    
    // Rules for redline proposals
    match /redlineProposals/{proposalId} {
        allow read: if request.auth != null;
        allow create: if true; // Anyone with link can propose
        allow update, delete: if request.auth != null && request.auth.uid == resource.data.creatorId;
    }
    
    // Rules for receipts
    match /receipts/{receiptId} {
       allow read, create, update, delete: if request.auth != null && request.auth.uid == request.resource.data.userId;
       allow list: if request.auth != null && request.auth.uid == request.query.userId;
    }

    // Rules for email logs (server-side only access, but readable by contract owner)
    match /emailLogs/{logId} {
      // Allow a user to read a log if they own the associated contract.
      // This supports the query on the contract details page.
      allow read: if request.auth != null && isContractOwner(resource.data.contractId);
      allow write: if false; // Only backend via Admin SDK
    }
    
    // Rules for agencies
    match /agencies/{agencyId} {
      allow read: if request.auth != null; // Any authenticated user can read agency info
      allow create, update: if request.auth != null && request.auth.uid == resource.data.ownerId; // Only owner can modify
    }
    
    // Rules for agency invitations (public write for creation)
    match /agencyInvitations/{invitationId} {
      allow read: if request.auth != null;
      allow create, update: if true; // Allow creation for user-not-found case, and updates for claiming
    }
    
    // Rules for internal payouts (only readable by agency owner or receiving talent)
    match /internalPayouts/{payoutId} {
      allow read: if request.auth != null && 
                    (request.auth.uid == resource.data.agencyOwnerId || request.auth.uid == resource.data.talentId);
      allow list, create, update, delete: if false; // Server-side only
    }

    // Rules for bank accounts & transactions (user-specific)
    match /users/{userId}/bankAccounts/{accountId} {
        allow read, write, delete: if request.auth.uid == userId;
    }
    match /users/{userId}/bankTransactions/{transactionId} {
        allow read, write, delete: if request.auth.uid == userId;
    }

  }
}
