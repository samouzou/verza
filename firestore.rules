rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwnerOfAgency(agencyId) {
      return request.auth != null &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAgencyOwner == true &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.agencyMemberships[0].agencyId == agencyId;
    }
    
    function userOwnsContract(contractId) {
      let contract = get(/databases/$(database)/documents/contracts/$(contractId)).data;
      return request.auth != null && (
        (contract.ownerType == 'user' && contract.userId == request.auth.uid) ||
        (contract.ownerType == 'agency' && isOwnerOfAgency(contract.ownerId))
      );
    }
    
    // User Profiles
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Contracts
    match /contracts/{contractId} {
      // Allow list for personal contracts OR agency contracts
      allow list: if (request.auth != null &&
                      (request.query.where.find(w => w.fieldPath == 'userId' && w.op == '==' && w.value == request.auth.uid) != null ||
                       (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAgencyOwner == true &&
                        request.query.where.find(w => w.fieldPath == 'ownerId' && w.op == '==' && w.value == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.agencyMemberships[0].agencyId) != null)));

      allow get, update, delete: if userOwnsContract(contractId);
      allow create: if request.auth != null;
    }

    // Agency Data
    match /agencies/{agencyId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isOwnerOfAgency(agencyId);
    }

    // Shared Contract Versions (Public)
    match /sharedContractVersions/{versionId} {
      allow read: if true;
      allow create: if request.auth != null && userOwnsContract(request.resource.data.originalContractId);
      allow update: if userOwnsContract(get(/databases/$(database)/documents/sharedContractVersions/$(versionId)).data.originalContractId);
      allow delete: if false;
    }

    // Contract Comments & Replies (Public write, owner delete)
    match /contractComments/{commentId} {
      allow read: if true;
      allow create: if true;
      allow update, delete: if request.auth != null && get(/databases/$(database)/documents/contractComments/$(commentId)).data.creatorId == request.auth.uid;
    }

    // Redline Proposals
    match /redlineProposals/{proposalId} {
        allow read: if true;
        allow create: if true;
        allow update, delete: if request.auth != null && get(/databases/$(database)/documents/redlineProposals/$(proposalId)).data.creatorId == request.auth.uid;
    }

    // Internal Payouts (Agency)
    match /internalPayouts/{payoutId} {
      allow read: if request.auth != null && (
        isOwnerOfAgency(resource.data.agencyId) ||
        resource.data.talentId == request.auth.uid
      );
      allow create: if request.auth != null && isOwnerOfAgency(request.resource.data.agencyId);
      allow update, delete: if false; // Should be handled by backend
    }

    // Email logs
    match /emailLogs/{logId} {
      allow read: if request.auth != null && userOwnsContract(resource.data.contractId);
      allow write: if false; // Only backend via Admin SDK
    }

    // Receipts
    match /receipts/{receiptId} {
      allow read, create, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Bank Accounts and Transactions
    match /users/{userId}/bankAccounts/{accountId} {
      allow read, write, create, delete: if request.auth != null && request.auth.uid == userId;
    }
    
    match /users/{userId}/bankTransactions/{transactionId} {
      allow read, write, create, delete: if request.auth != null && request.auth.uid == userId;
    }
  }
}