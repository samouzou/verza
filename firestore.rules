rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an agency owner
    function isAgencyOwner(agencyId) {
      return get(/databases/$(database)/documents/agencies/$(agencyId)).data.ownerId == request.auth.uid;
    }

    // Rules for User Profiles
    match /users/{userId} {
      // Allow users to read their own profile
      allow read: if request.auth != null && request.auth.uid == userId;
      // Allow users to create their own profile upon signup
      allow create: if request.auth != null && request.auth.uid == userId;
      // Allow users to update their own profile
      allow update: if request.auth != null && request.auth.uid == userId;
    }

    // Rules for Agencies
    match /agencies/{agencyId} {
      // Allow authenticated users to read agency data (needed for UI)
      allow read: if request.auth != null;
      // Allow authenticated users to create an agency
      allow create: if request.auth != null;
      // Only allow the agency owner to update their agency details
      allow update: if request.auth != null && isAgencyOwner(agencyId);
    }
    
    // Rules for Shareable Contract Versions
    match /sharedContractVersions/{versionId} {
      // Allow anyone with the link to read the shared version
      allow read: if true;
      // Allow the creator who owns the contract to update the shared version (e.g., to revoke it)
      allow update: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Rules for Contract Comments
    match /contractComments/{commentId} {
      // Allow anyone to create a comment (as it's on a public shared link)
      allow create: if true;
      // Allow the creator to read comments on their contracts
      allow read: if request.auth != null && request.auth.uid == resource.data.creatorId;
      // Allow the creator to update/delete comments (e.g., to add replies)
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.creatorId;
    }
    
     // Rules for Redline Proposals
    match /redlineProposals/{proposalId} {
      // Allow anyone to create a proposal on a shared link
      allow create: if true;
      // Allow the creator to read and update (accept/reject) proposals on their contracts
      allow read, update: if request.auth != null && request.auth.uid == resource.data.creatorId;
    }

    // Rules for Contracts
    match /contracts/{contractId} {
      // Allow create if user is creating it for themselves OR if they are an agency owner
      allow create: if request.auth != null && 
                     (request.resource.data.userId == request.auth.uid || 
                      isAgencyOwner(request.resource.data.ownerId));

      // Allow read, update, delete if user is the talent OR the agency owner
      allow read, update, delete: if request.auth != null &&
                                   (resource.data.userId == request.auth.uid ||
                                    (resource.data.ownerType == 'agency' && isAgencyOwner(resource.data.ownerId)));
    }

    // Rules for Email Logs
    match /emailLogs/{logId} {
      allow create, read: if request.auth != null;
    }

    // Rules for Payment Intents
    match /paymentIntents/{intentId} {
      allow create: if request.auth != null;
    }
    
    // Rules for Payments
    match /payments/{paymentId} {
      allow create: if request.auth != null;
    }
    
    // Rules for Receipts
    match /receipts/{receiptId} {
      allow read, create, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Rules for Banking
    match /users/{userId}/bankAccounts/{accountId} {
      allow read, create, update, delete: if request.auth != null && request.auth.uid == userId;
    }
    match /users/{userId}/bankTransactions/{transactionId} {
      allow read, create, update, delete: if request.auth != null && request.auth.uid == userId;
    }
  }
}
