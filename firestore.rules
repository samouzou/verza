rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isAgencyOwnerOfContract() {
      // Get the agencyId from the contract's ownerId field
      let agencyId = resource.data.ownerId;
      // Check if the requesting user has an agency membership with role 'owner' for that agencyId
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             request.auth.uid == get(/databases/$(database)/documents/agencies/$(agencyId)).data.ownerId;
    }

    match /users/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    match /agencies/{agencyId} {
      allow read: if isOwner(get(/databases/$(database)/documents/agencies/$(agencyId)).data.ownerId) ||
                    request.auth.uid in get(/databases/$(database)/documents/agencies/$(agencyId)).data.talent.map(t => t.userId);
      allow write: if isOwner(get(/databases/$(database)/documents/agencies/$(agencyId)).data.ownerId);
    }

    match /contracts/{contractId} {
      // Allow read only if the user is the direct owner (creator) or the agency owner managing the contract.
      allow read: if request.auth != null && (isOwner(resource.data.userId) || isAgencyOwnerOfContract());

      // Allow create if the user is authenticated and is the owner specified in the document.
      allow create: if request.auth != null && isOwner(request.resource.data.userId);
      
      // Allow update and delete if the user is the direct owner OR the agency owner.
      allow update, delete: if request.auth != null && (isOwner(resource.data.userId) || isAgencyOwnerOfContract());
    }

    match /sharedContractVersions/{versionId} {
      // Anyone with the link can read the specific shared version.
      allow read: if true;
      // Only the creator can create or update/revoke their own shared versions.
      allow create, update: if request.auth.uid == request.resource.data.userId;
    }
    
    match /contractComments/{commentId} {
      // Anyone can create comments on a shared contract.
      allow create: if true;
      // Only the creator of the contract can read or delete comments.
      allow read, delete: if isOwner(resource.data.creatorId);
      // Allow creator to update to add replies.
      allow update: if isOwner(request.resource.data.creatorId);
    }
    
    match /redlineProposals/{proposalId} {
      // Anyone can create redline proposals.
      allow create: if true;
      // Only the creator can read or update (accept/reject) proposals.
      allow read, update: if isOwner(resource.data.creatorId);
    }
    
    // Default deny all other reads/writes
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
