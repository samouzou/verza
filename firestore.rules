rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isAgencyOwner(agencyId) {
        return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAgencyOwner == true &&
               get(/databases/$(database)/documents/users/$(request.auth.uid)).data.agencyMemberships[0].agencyId == agencyId;
    }

    match /users/{userId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }
    
    match /agencies/{agencyId} {
      allow read: if isOwner(resource.data.ownerId);
      allow write: if isOwner(resource.data.ownerId);
    }
    
    match /internalPayouts/{payoutId} {
        allow read: if isOwner(resource.data.agencyOwnerId) || isOwner(resource.data.talentId);
        allow create: if isOwner(request.resource.data.agencyOwnerId);
    }
    
    match /contracts/{contractId} {
      allow read: if isOwner(resource.data.userId) || isAgencyOwner(resource.data.ownerId);
      allow create: if isOwner(request.resource.data.userId);
      allow update, delete: if isOwner(resource.data.userId) || isAgencyOwner(resource.data.ownerId);
    }

    match /sharedContractVersions/{versionId} {
      allow read: if true; // Publicly accessible via share link
      allow create: if request.auth != null; // Any authenticated user can create
      allow update: if request.auth != null && resource.data.userId == request.auth.uid; // Only creator can update
    }
    
    match /contractComments/{commentId} {
        allow read: if true; // Publicly viewable by anyone with the share link
        allow create: if true; // Anyone (brand) can create a comment
        allow update, delete: if request.auth != null && resource.data.creatorId == request.auth.uid; // Only creator can delete
    }
    
     match /redlineProposals/{proposalId} {
      allow read: if true; // Publicly viewable
      allow create: if true; // Anyone (brand) can create a proposal
      allow update: if request.auth != null && resource.data.creatorId == request.auth.uid; // Only creator can update status
    }

    match /receipts/{receiptId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }

    match /paymentIntents/{intentId} {
      allow create: if true; // Allow creation from backend function
      allow read, write: if false; // Should only be managed by backend
    }
    
    match /payments/{paymentId} {
      allow create: if true; // Allow creation from backend function
      allow read, write: if false; // Should only be managed by backend
    }
    
    match /emailLogs/{logId} {
       allow create: if true; // Allow creation from backend function
       allow read, write, delete: if false;
    }
    
    match /agencyInvitations/{invitationId} {
      allow read, write: if true; // Open for user creation process and backend access
    }
  }
}