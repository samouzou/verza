
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper Functions
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isAgencyOwnerForContract(contractId) {
      let contractData = get(/databases/$(database)/documents/contracts/$(contractId)).data;
      return request.auth != null &&
             request.auth.token.isAgencyOwner == true &&
             contractData.ownerType == 'agency' &&
             contractData.ownerId == request.auth.token.agencyId;
    }

    // Rules for Users
    match /users/{userId} {
      allow read: if true; // Public profiles are readable
      allow write: if isOwner(userId); // Users can only write to their own profile
    }

    // Rules for Contracts
    match /contracts/{contractId} {
      // Allow read/write if the user is the direct owner OR the managing agency owner
      allow read, write: if isOwner(resource.data.userId) || isAgencyOwnerForContract(contractId);
      // Allow LIST queries for a user's own contracts OR an agency owner's contracts
      allow list: if request.auth != null && 
                    (request.query.where[0][2] == request.auth.uid || 
                     (request.auth.token.isAgencyOwner == true && request.query.where[0][2] == request.auth.token.agencyId));
    }

    // Rules for Shared Contract Versions (Publicly accessible links)
    match /sharedContractVersions/{versionId} {
      allow read: if true; // Anyone with the link can read
      // Only the owner can create or revoke (update) a share link
      allow create, update: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow delete: if false; // Disallow deletion
    }

    // Rules for Comments and Proposals on Shared Contracts (Public can create)
    match /contractComments/{commentId} {
      allow read: if true; // Everyone can read comments
      allow create: if true; // Anyone can post a comment
      // Only the creator who owns the contract can delete the comment thread
      allow delete: if request.auth != null && get(/databases/$(database)/documents/contractComments/$(commentId)).data.creatorId == request.auth.uid;
      allow update: if request.auth != null; // Allow creator to update to add replies
    }
    
    match /redlineProposals/{proposalId} {
        allow read: if true;
        allow create: if true;
        // Only creator can accept/reject
        allow update: if request.auth != null && get(/databases/$(database)/documents/redlineProposals/$(proposalId)).data.creatorId == request.auth.uid;
        allow delete: if false;
    }
    
    // Rules for Receipts
    match /receipts/{receiptId} {
        allow read, create, delete, update: if isOwner(request.resource.data.userId);
        allow list: if request.auth != null && request.query.where[0][2] == request.auth.uid;
    }
    
    // Rules for Bank Accounts and Transactions (User-private)
    match /users/{userId}/bankAccounts/{accountId} {
        allow read, write: if isOwner(userId);
    }
     match /users/{userId}/bankTransactions/{transactionId} {
        allow read, write: if isOwner(userId);
    }

    // Rules for email logs (server-side only access, except for reads by owner)
    match /emailLogs/{logId} {
      // Allow a user to list logs for a contract they own
      allow list: if request.auth != null && isOwnerOfContract(request.query.where[1][2]);
      // Allow a user to read a single log if they own the related contract
      allow read: if request.auth != null && isOwnerOfContract(get(/databases/$(database)/documents/emailLogs/$(logId)).data.contractId);
      allow write: if false; // Only backend via Admin SDK
    }
    
    // Rules for Agencies
    match /agencies/{agencyId} {
        allow read: if request.auth != null;
        allow create, update: if request.auth != null && request.resource.data.ownerId == request.auth.uid;
    }

    match /agencyInvitations/{inviteId} {
        allow read, write: if request.auth != null; // Managed by backend logic
    }
    
    // Rules for Internal Payouts (Between Agency and Talent)
    match /internalPayouts/{payoutId} {
      allow read: if request.auth != null && 
                   (get(/databases/$(database)/documents/internalPayouts/$(payoutId)).data.agencyOwnerId == request.auth.uid || 
                    get(/databases/$(database)/documents/internalPayouts/$(payoutId)).data.talentId == request.auth.uid);
      
      allow list: if request.auth != null && 
                   (request.query.where[0][2] == request.auth.uid || 
                    (request.auth.token.isAgencyOwner == true && request.query.where[0][2] == request.auth.token.agencyId));

      allow create: if request.auth != null && request.resource.data.agencyOwnerId == request.auth.uid;
      allow update, delete: if false;
    }

    // Payment-related collections - generally backend access only
    match /paymentIntents/{intentId} {
      allow read, write: if false;
    }
     match /payments/{paymentId} {
      allow read, write: if false;
    }
  }
}
