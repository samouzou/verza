rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an agency owner
    function isAgencyOwner(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.isAgencyOwner == true;
    }
    
    // Helper function to check if the requesting user is the owner of a specific agency
    function isOwnerOfAgency(agencyId) {
      return get(/databases/$(database)/documents/agencies/$(agencyId)).data.ownerId == request.auth.uid;
    }

    // Rules for the users collection
    match /users/{userId} {
      // Users can read and update their own profile
      allow read, update: if request.auth != null && request.auth.uid == userId;
      // Allow creation of user doc for any authenticated user (typically on first login)
      allow create: if request.auth != null;
    }

    // Rules for the contracts collection
    match /contracts/{contractId} {
      allow read, update, delete: if request.auth != null && 
        (
          request.auth.uid == resource.data.userId || // User is the talent on the contract
          (resource.data.ownerType == 'agency' && isOwnerOfAgency(resource.data.ownerId)) // User is the owner of the agency on the contract
        );
      
      allow create: if request.auth != null && 
        (
          request.auth.uid == request.resource.data.userId || // Talent creating for themselves
          (request.resource.data.ownerType == 'agency' && isAgencyOwner(request.auth.uid)) // Agency owner creating for talent
        );
    }
    
    // Rules for shared contract versions (public read, creator write/delete)
    match /sharedContractVersions/{versionId} {
      // Anyone can read a shared version if it is 'active'.
      allow read: if resource.data.status == 'active';
      // Only the creator who owns the original contract can create, update, or revoke a share link.
      allow create, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Rules for contract comments on shared versions
    match /contractComments/{commentId} {
      // Anyone can create a comment on a shared contract.
      allow create: if true; 
      // Only the creator who owns the contract can read, update, or delete comments on their shared versions.
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.creatorId;
    }
    
    // Rules for redline proposals on shared versions
    match /redlineProposals/{proposalId} {
      // Anyone can create a proposal on a shared contract.
      allow create: if true;
      // Only the creator can read, update (accept/reject), or delete proposals.
      allow read, update, delete: if request.auth != null && request.auth.uid == resource.data.creatorId;
    }

    // Rules for payment intents (server-side only access)
    match /paymentIntents/{intentId} {
      allow read, write: if false; // Should only be accessed by backend functions
    }
    
    // Rules for payments log (server-side only access)
    match /payments/{paymentId} {
      allow read, write: if false; // Should only be accessed by backend functions
    }
    
    // Rules for email logs (server-side only access)
    match /emailLogs/{logId} {
        allow read, write: if false; // Should only be accessed by backend functions
    }
    
    // Rules for bank accounts (user-specific access)
    match /users/{userId}/bankAccounts/{accountId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Rules for bank transactions (user-specific access)
    match /users/{userId}/bankTransactions/{transactionId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Rules for receipts (user-specific access)
    match /receipts/{receiptId} {
       allow read, create, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Rules for agencies
    match /agencies/{agencyId} {
      allow read: if request.auth != null; // Allow any authenticated user to read agency details (e.g., for invitations)
      allow create, update, delete: if request.auth != null && request.auth.uid == resource.data.ownerId; // Only owner can manage
    }
    
    // Rules for internal payouts
    match /internalPayouts/{payoutId} {
      // Agency owner can read all payouts for their agency.
      // Talent can read payouts directed to them.
      allow read: if request.auth != null && (request.auth.uid == resource.data.agencyOwnerId || request.auth.uid == resource.data.talentId);
      allow write: if false; // Payouts created via a Cloud Function
    }
  }
}
