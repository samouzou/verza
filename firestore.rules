
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- User Profile and Sub-collections ---
    match /users/{userId} {
      // Users can create, read, and update their own profile document.
      allow create, read, update: if request.auth != null && request.auth.uid == userId;
      // Deleting a user document should be handled by a backend process.
      allow delete: if false;

      // Rules for Bank Accounts sub-collection
      match /bankAccounts/{accountId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // Rules for Bank Transactions sub-collection
      match /bankTransactions/{transactionId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // --- Primary Collections ---

    // Rules for the 'agencies' collection
    match /agencies/{agencyId} {
      // Allow read if the user is the owner OR is listed as a talent member in the agency.
      // This uses the user's own profile to check for membership.
      allow read: if request.auth != null &&
                   (request.auth.uid == resource.data.ownerId ||
                    agencyId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.agencyMemberships.map(mem => mem.agencyId));

      // Allow create if the user is authenticated and setting themselves as the owner.
      allow create: if request.auth != null && request.resource.data.ownerId == request.auth.uid;

      // Allow update only by the owner of the agency.
      allow update: if request.auth != null && resource.data.ownerId == request.auth.uid;
      
      // Deleting an agency should be handled by a backend process for safety.
      allow delete: if false;
    }
    
    // Rules for the 'contracts' collection
    match /contracts/{contractId} {
      // Authenticated users can read contracts. This is required for various app functions.
      // For the public payment page, the backend function will need to handle data fetching.
      allow read: if request.auth != null;

      // Authenticated users can create contracts if they are the owner.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      
      // Authenticated users can update or delete only their own contracts.
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    
    // Rules for the 'receipts' collection
    match /receipts/{receiptId} {
      allow read, update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }
    
    // --- Sharing and Feedback ---

    match /sharedContractVersions/{sharedVersionId} {
      // PUBLIC READ for active links: Allow anyone to read if the status is 'active'.
      // Authenticated creator can always read their own versions regardless of status.
      allow read: if (resource.data.status == 'active') || 
                       (request.auth != null && request.auth.uid == resource.data.userId);

      // Allow a user to create a shared version if:
      // 1. They are authenticated.
      // 2. The userId in the new document matches their own UID.
      // 3. The originalContractId in the new document points to a contract they own.
      allow create: if request.auth != null &&
                       request.resource.data.userId == request.auth.uid &&
                       get(/databases/$(database)/documents/contracts/$(request.resource.data.originalContractId)).data.userId == request.auth.uid;

      // Only the creator can update (e.g., to revoke) or delete.
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Rules for 'contractComments' collection
    match /contractComments/{commentId} {
      allow create: if request.resource.data.sharedVersionId != null &&
                       exists(/databases/$(database)/documents/sharedContractVersions/$(request.resource.data.sharedVersionId)) &&
                       get(/databases/$(database)/documents/sharedContractVersions/$(request.resource.data.sharedVersionId)).data.status == 'active' &&
                       request.resource.data.creatorId == get(/databases/$(database)/documents/sharedContractVersions/$(request.resource.data.sharedVersionId)).data.userId &&
                       request.resource.data.commenterName is string && request.resource.data.commenterName.size() > 0 && request.resource.data.commenterName.size() < 100 &&
                       request.resource.data.commentText is string && request.resource.data.commentText.size() > 0 && request.resource.data.commentText.size() < 2000 &&
                       request.resource.data.commentedAt == request.time &&
                       (request.resource.data.commenterEmail == null || (request.resource.data.commenterEmail is string && request.resource.data.commenterEmail.size() < 100)) &&
                       request.resource.data.originalContractId == get(/databases/$(database)/documents/sharedContractVersions/$(request.resource.data.sharedVersionId)).data.originalContractId;
      
      allow read: if get(/databases/$(database)/documents/sharedContractVersions/$(resource.data.sharedVersionId)).data.status == 'active' ||
                     (request.auth != null && request.auth.uid == resource.data.creatorId);

      allow update: if request.auth != null && request.auth.uid == resource.data.creatorId &&
                       request.resource.data.creatorId == resource.data.creatorId && 
                       request.resource.data.originalContractId == resource.data.originalContractId && 
                       request.resource.data.sharedVersionId == resource.data.sharedVersionId && 
                       (request.resource.data.replies == null || request.resource.data.replies is list);
                       
      allow delete: if request.auth != null && request.auth.uid == resource.data.creatorId;
    }
    
    // Rules for 'redlineProposals' collection
    match /redlineProposals/{proposalId} {
      allow create: if request.resource.data.sharedVersionId != null &&
                       exists(/databases/$(database)/documents/sharedContractVersions/$(request.resource.data.sharedVersionId)) &&
                       get(/databases/$(database)/documents/sharedContractVersions/$(request.resource.data.sharedVersionId)).data.status == 'active' &&
                       request.resource.data.proposerName is string && request.resource.data.proposerName.size() > 0 &&
                       request.resource.data.originalText is string && request.resource.data.originalText.size() > 0 &&
                       request.resource.data.proposedText is string && request.resource.data.proposedText.size() > 0 &&
                       request.resource.data.creatorId == get(/databases/$(database)/documents/sharedContractVersions/$(request.resource.data.sharedVersionId)).data.userId &&
                       request.resource.data.status == 'proposed' &&
                       request.resource.data.proposedAt == request.time;
      
      allow read: if get(/databases/$(database)/documents/sharedContractVersions/$(resource.data.sharedVersionId)).data.status == 'active' ||
                     (request.auth != null && request.auth.uid == resource.data.creatorId);

      allow update: if request.auth != null && request.auth.uid == resource.data.creatorId &&
                       request.resource.data.originalText == resource.data.originalText &&
                       request.resource.data.proposedText == resource.data.proposedText &&
                       request.resource.data.proposerName == resource.data.proposerName &&
                       request.resource.data.status in ['accepted', 'rejected'];

      allow delete: if request.auth != null && request.auth.uid == resource.data.creatorId;
    }

    // --- Backend-Managed Collections ---

    // Rules for 'paymentIntents' collection (created by backend)
    match /paymentIntents/{intentId} {
      allow read: if request.auth != null && (request.auth.uid == resource.data.userId || request.auth.uid == resource.data.creatorId);
      allow write: if false; // Only backend via Admin SDK
    }

    // Rules for 'payments' collection (created by backend webhook)
    match /payments/{paymentId} {
       allow read: if request.auth != null && (request.auth.uid == resource.data.userId || request.auth.uid == resource.data.creatorId);
      allow write: if false; // Only backend via Admin SDK
    }

    // Rules for 'emailLogs' collection (created by backend)
    match /emailLogs/{logId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow write: if false; // Only backend via Admin SDK
    }
  }
}
